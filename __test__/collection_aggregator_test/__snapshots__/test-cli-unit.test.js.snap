// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show -d will be used if both -d and -l provided 1`] = `"TypeError: fs.readdirSync(...).filter is not a function"`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with custom path -1 1`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with custom path -1 2`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with custom path -1 3`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with custom path -1 4`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with custom path -1 5`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with custom path -d 1`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with custom path -d 2`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with custom path -d 3`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with custom path -d 4`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with custom path -d 5`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with default path for -d 1`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with default path for -d 2`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with default path for -d 3`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with default path for -d 4`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with default path for -d 5`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with default path for -l 1`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with default path for -l 2`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with default path for -l 3`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with default path for -l 4`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file saved message correctly with default path for -l 5`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file/folder not found error if collection directory doesnt exists 1`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file/folder not found error if collection directory doesnt exists 2`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file/folder not found error if collection directory doesnt exists 3`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file/folder not found error if collection directory doesnt exists 4`] = `"exit"`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file/folder not found error if collection directory doesnt exists 5`] = `
[MockFunction] {
  "calls": Array [
    Array [],
  ],
  "results": Array [
    Object {
      "type": "throw",
      "value": [Error: exit],
    },
  ],
}
`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file/folder not found error if collection directory doesnt exists 6`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "[31mENOENT: no such file or directory, scandir '__test__\\\\collection_aggregator_test\\\\collections'[39m",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file/folder not found error if collection directory doesnt exists 7`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file/folder not found error if collection list file doesnt exists 1`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file/folder not found error if collection list file doesnt exists 2`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file/folder not found error if collection list file doesnt exists 3`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file/folder not found error if collection list file doesnt exists 4`] = `"exit"`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file/folder not found error if collection list file doesnt exists 5`] = `
[MockFunction] {
  "calls": Array [
    Array [
      1,
    ],
  ],
  "results": Array [
    Object {
      "type": "throw",
      "value": [Error: exit],
    },
  ],
}
`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file/folder not found error if collection list file doesnt exists 6`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
Usage: -c \\"root/collection_name.json\\" -r \\"{{Baseurl}}/path1/path2\\" -w
\\"{{Baseurl}}/{{path}}\\" -s \\"root/new_collection_name.json\\"

or

Usage: -i

Options:
      --help                  Show help                                [boolean]
      --version               Show version number                      [boolean]
  -i, --interactive           Pass -i to enter Interactive mode
                                                      [boolean] [default: false]
  -n, --new_collection_name   Name of the new collection
                                     [string] [default: \\"Aggregated collection\\"]
  -l, --collection_list       Pass relative or absolute collection file paths
                                                                         [array]
  -d, --collection_directory  Directory containing all collection files [string]
  -s, --save_as               path to save new collection
      [string] [default: \\"currentDirectory/<newcollectionName>.collection.json\\"]

Examples:
  jest.js -n \\"new_collection\\" -l            - Using collection list
  \\"path/collection1.json\\"
  \\"path/collection1.json\\"
  \\"path/collection1.json\\"
  jest.js -d \\"./collection_directory\\"       - Using collection directory",
    ],
    Array [],
    Array [
      "Please provide either collection_directory or collection_list
[Missing required property -l or -d]",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
    Object {
      "type": "return",
      "value": undefined,
    },
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show file/folder not found error if collection list file doesnt exists 7`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if -l and -d argument is missing 1`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if -l and -d argument is missing 2`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if -l and -d argument is missing 3`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if -l and -d argument is missing 4`] = `"exit"`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if -l and -d argument is missing 5`] = `
[MockFunction] {
  "calls": Array [
    Array [
      1,
    ],
  ],
  "results": Array [
    Object {
      "type": "throw",
      "value": [Error: exit],
    },
  ],
}
`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if -l and -d argument is missing 6`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
Usage: -c \\"root/collection_name.json\\" -r \\"{{Baseurl}}/path1/path2\\" -w
\\"{{Baseurl}}/{{path}}\\" -s \\"root/new_collection_name.json\\"

or

Usage: -i

Options:
      --help                  Show help                                [boolean]
      --version               Show version number                      [boolean]
  -i, --interactive           Pass -i to enter Interactive mode
                                                      [boolean] [default: false]
  -n, --new_collection_name   Name of the new collection
                                     [string] [default: \\"Aggregated collection\\"]
  -l, --collection_list       Pass relative or absolute collection file paths
                                                                         [array]
  -d, --collection_directory  Directory containing all collection files [string]
  -s, --save_as               path to save new collection
      [string] [default: \\"currentDirectory/<newcollectionName>.collection.json\\"]

Examples:
  jest.js -n \\"new_collection\\" -l            - Using collection list
  \\"path/collection1.json\\"
  \\"path/collection1.json\\"
  \\"path/collection1.json\\"
  jest.js -d \\"./collection_directory\\"       - Using collection directory",
    ],
    Array [],
    Array [
      "Please provide either collection_directory or collection_list
[Missing required property -l or -d]",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
    Object {
      "type": "return",
      "value": undefined,
    },
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if -l and -d argument is missing 7`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if -n argument is missing 1`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if -n argument is missing 2`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if -n argument is missing 3`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if -n argument is missing 4`] = `"exit"`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if -n argument is missing 5`] = `
[MockFunction] {
  "calls": Array [
    Array [],
  ],
  "results": Array [
    Object {
      "type": "throw",
      "value": [Error: exit],
    },
  ],
}
`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if -n argument is missing 6`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "[31mENOENT: no such file or directory, scandir 'undefined'[39m",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if -n argument is missing 7`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if arguments are missing 1`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if arguments are missing 2`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if arguments are missing 3`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if arguments are missing 4`] = `"exit"`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if arguments are missing 5`] = `
[MockFunction] {
  "calls": Array [
    Array [
      1,
    ],
  ],
  "results": Array [
    Object {
      "type": "throw",
      "value": [Error: exit],
    },
  ],
}
`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if arguments are missing 6`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "
Usage: -c \\"root/collection_name.json\\" -r \\"{{Baseurl}}/path1/path2\\" -w
\\"{{Baseurl}}/{{path}}\\" -s \\"root/new_collection_name.json\\"

or

Usage: -i

Options:
      --help                  Show help                                [boolean]
      --version               Show version number                      [boolean]
  -i, --interactive           Pass -i to enter Interactive mode
                                                      [boolean] [default: false]
  -n, --new_collection_name   Name of the new collection
                                     [string] [default: \\"Aggregated collection\\"]
  -l, --collection_list       Pass relative or absolute collection file paths
                                                                         [array]
  -d, --collection_directory  Directory containing all collection files [string]
  -s, --save_as               path to save new collection
      [string] [default: \\"currentDirectory/<newcollectionName>.collection.json\\"]

Examples:
  jest.js -n \\"new_collection\\" -l            - Using collection list
  \\"path/collection1.json\\"
  \\"path/collection1.json\\"
  \\"path/collection1.json\\"
  jest.js -d \\"./collection_directory\\"       - Using collection directory",
    ],
    Array [],
    Array [
      "Please provide either collection_directory or collection_list
[Missing required property -l or -d]",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
    Object {
      "type": "return",
      "value": undefined,
    },
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should show help if arguments are missing 7`] = `[MockFunction]`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should throw error if exception thrown doesnt contain error code ENOENT 1`] = `"Custom error"`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should throw invalid collection if a valid collection directory is not provided 1`] = `"exit"`;

exports[`Validate index.js unit tests Validate cli output messages for non interactive Should throw invalid collection if a valid collection is not provided in -l 1`] = `"exit"`;
